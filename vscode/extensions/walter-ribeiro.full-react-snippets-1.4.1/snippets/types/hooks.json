{
  "useState": {
    "prefix": "useState",
    "body": [
      "const [${1:state}, set${1/(.*)/${1:/capitalize}/}] = useState(${2:initialState})"
    ],
    "description": [
      "Returns a stateful value, and a function to update it.\n",
      "During the initial render, the returned state (state) is the same as the value passed as the first argument (initialState).\n",
      "The setState function is used to update the state. It accepts a new state value and enqueues a re-render of the component."
    ]
  },
  "useEffect": {
    "prefix": "useEffect",
    "body": [
      "useEffect(() => {",
      "  return () => {",
      "    ${1:effect}",
      "  };",
      "}, [${2:input}])"
    ],
    "description": [
      "Accepts a function that contains imperative, possibly effectful code.\n",
      "Mutations, subscriptions, timers, logging, and other side effects are not allowed inside the main body of a function component (referred to as React’s render phase). Doing so will lead to confusing bugs and inconsistencies in the UI.\n",
      "Instead, use useEffect. The function passed to useEffect will run after the render is committed to the screen. Think of effects as an escape hatch from React’s purely functional world into the imperative world.\n",
      "By default, effects run after every completed render, but you can choose to fire it only when certain values have changed."
    ]
  },
  "useContext": {
    "prefix": "useContext",
    "body": ["const ${1:context} = useContext(${2:contextValue})"],
    "description": [
      "Accepts a context object (the value returned from React.createContext) and returns the current context value for that context. The current context value is determined by the value prop of the nearest <MyContext.Provider> above the calling component in the tree.\n",
      "When the nearest <MyContext.Provider> above the component updates, this Hook will trigger a rerender with the latest context value passed to that MyContext provider."
    ]
  },
  "useReducer": {
    "prefix": "useReducer",
    "body": [
      "const [state, dispatch] = useReducer(${1:reducer}, ${2:initialState}, ${3:init})"
    ],
    "description": [
      "An alternative to useState. Accepts a reducer of type (state, action) => newState, and returns the current state paired with a dispatch method. (If you’re familiar with Redux, you already know how this works.)\n",
      "useReducer is usually preferable to useState when you have complex state logic that involves multiple sub-values or when the next state depends on the previous one. useReducer also lets you optimize performance for components that trigger deep updates because you can pass dispatch down instead of callbacks."
    ]
  },
  "useCallback": {
    "prefix": "useCallback",
    "body": [
      "const memoizedCallback = useCallback(",
      "  () => {",
      "    ${1:callback}",
      "  },",
      "  [${2:input}],",
      ")"
    ],
    "description": [
      "Returns a memoized callback.\n",
      "Pass an inline callback and an array of dependencies. useCallback will return a memoized version of the callback that only changes if one of the dependencies has changed. This is useful when passing callbacks to optimized child components that rely on reference equality to prevent unnecessary renders (e.g. shouldComponentUpdate)."
    ]
  },
  "useMemo": {
    "prefix": "useMemo",
    "body": ["const memoizedValue = useMemo(() => ${1:function}, ${2:input})"],
    "description": [
      "Returns a memoized value.\n",
      "Pass a “create” function and an array of dependencies. useMemo will only recompute the memoized value when one of the dependencies has changed. This optimization helps to avoid expensive calculations on every render.\n",
      "Remember that the function passed to useMemo runs during rendering. Don’t do anything there that you wouldn’t normally do while rendering. For example, side effects belong in useEffect, not useMemo.\n",
      "If no array is provided, a new value will be computed on every render."
    ]
  },
  "useRef": {
    "prefix": "useRef",
    "body": ["const ${1:ref} = useRef(${2:initialValue})"],
    "description": "useRef returns a mutable ref object whose .current property is initialized to the passed argument (initialValue). The returned object will persist for the full lifetime of the component."
  },
  "useImperativeHandle": {
    "prefix": "useImperativeHandle",
    "body": [
      "useImperativeHandle(",
      "  ${1:ref},",
      "  () => {",
      "    ${2:handler}",
      "  },",
      "  [${3:input}],",
      ")"
    ],
    "description": "Customizes the instance value that is exposed to parent components when using ref. As always, imperative code using refs should be avoided in most cases."
  },
  "useLayoutEffect": {
    "prefix": "useLayoutEffect",
    "body": [
      "useLayoutEffect(() => {",
      "  return () => {",
      "    ${1:effect}",
      "  },",
      "  [${2:input}]",
      "})"
    ],
    "description": [
      "The signature is identical to useEffect, but it fires synchronously after all DOM mutations.\n",
      "Use this to read layout from the DOM and synchronously re-render. Updates scheduled inside useLayoutEffect will be flushed synchronously, before the browser has a chance to paint."
    ]
  },
  "useDebugValue": {
    "prefix": "useDebugValue",
    "body": ["useDebugValue(${1:value})"],
    "description": "Can be used to display a label for custom hooks in React DevTools."
  }
}
