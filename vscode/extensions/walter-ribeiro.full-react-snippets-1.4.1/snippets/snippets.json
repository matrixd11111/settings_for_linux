{
  "GraphQL For Component": {
    "prefix": "graphql",
    "body": ["import { compose, graphql } from 'react-apollo'", ""]
  },
  "Export GraphQL": {
    "prefix": "expgql",
    "body": [
      "export default compose(",
      "  graphql(${1:queryOrMutation}, { name: ${2:name} }),",
      ")(${3:ComponentName})"
    ]
  }
,
  "useState": {
    "prefix": "useState",
    "body": [
      "const [${1:state}, set${1/(.*)/${1:/capitalize}/}] = useState(${2:initialState})"
    ],
    "description": [
      "Returns a stateful value, and a function to update it.\n",
      "During the initial render, the returned state (state) is the same as the value passed as the first argument (initialState).\n",
      "The setState function is used to update the state. It accepts a new state value and enqueues a re-render of the component."
    ]
  },
  "useEffect": {
    "prefix": "useEffect",
    "body": [
      "useEffect(() => {",
      "  return () => {",
      "    ${1:effect}",
      "  };",
      "}, [${2:input}])"
    ],
    "description": [
      "Accepts a function that contains imperative, possibly effectful code.\n",
      "Mutations, subscriptions, timers, logging, and other side effects are not allowed inside the main body of a function component (referred to as React’s render phase). Doing so will lead to confusing bugs and inconsistencies in the UI.\n",
      "Instead, use useEffect. The function passed to useEffect will run after the render is committed to the screen. Think of effects as an escape hatch from React’s purely functional world into the imperative world.\n",
      "By default, effects run after every completed render, but you can choose to fire it only when certain values have changed."
    ]
  },
  "useContext": {
    "prefix": "useContext",
    "body": ["const ${1:context} = useContext(${2:contextValue})"],
    "description": [
      "Accepts a context object (the value returned from React.createContext) and returns the current context value for that context. The current context value is determined by the value prop of the nearest <MyContext.Provider> above the calling component in the tree.\n",
      "When the nearest <MyContext.Provider> above the component updates, this Hook will trigger a rerender with the latest context value passed to that MyContext provider."
    ]
  },
  "useReducer": {
    "prefix": "useReducer",
    "body": [
      "const [state, dispatch] = useReducer(${1:reducer}, ${2:initialState}, ${3:init})"
    ],
    "description": [
      "An alternative to useState. Accepts a reducer of type (state, action) => newState, and returns the current state paired with a dispatch method. (If you’re familiar with Redux, you already know how this works.)\n",
      "useReducer is usually preferable to useState when you have complex state logic that involves multiple sub-values or when the next state depends on the previous one. useReducer also lets you optimize performance for components that trigger deep updates because you can pass dispatch down instead of callbacks."
    ]
  },
  "useCallback": {
    "prefix": "useCallback",
    "body": [
      "const memoizedCallback = useCallback(",
      "  () => {",
      "    ${1:callback}",
      "  },",
      "  [${2:input}],",
      ")"
    ],
    "description": [
      "Returns a memoized callback.\n",
      "Pass an inline callback and an array of dependencies. useCallback will return a memoized version of the callback that only changes if one of the dependencies has changed. This is useful when passing callbacks to optimized child components that rely on reference equality to prevent unnecessary renders (e.g. shouldComponentUpdate)."
    ]
  },
  "useMemo": {
    "prefix": "useMemo",
    "body": ["const memoizedValue = useMemo(() => ${1:function}, ${2:input})"],
    "description": [
      "Returns a memoized value.\n",
      "Pass a “create” function and an array of dependencies. useMemo will only recompute the memoized value when one of the dependencies has changed. This optimization helps to avoid expensive calculations on every render.\n",
      "Remember that the function passed to useMemo runs during rendering. Don’t do anything there that you wouldn’t normally do while rendering. For example, side effects belong in useEffect, not useMemo.\n",
      "If no array is provided, a new value will be computed on every render."
    ]
  },
  "useRef": {
    "prefix": "useRef",
    "body": ["const ${1:ref} = useRef(${2:initialValue})"],
    "description": "useRef returns a mutable ref object whose .current property is initialized to the passed argument (initialValue). The returned object will persist for the full lifetime of the component."
  },
  "useImperativeHandle": {
    "prefix": "useImperativeHandle",
    "body": [
      "useImperativeHandle(",
      "  ${1:ref},",
      "  () => {",
      "    ${2:handler}",
      "  },",
      "  [${3:input}],",
      ")"
    ],
    "description": "Customizes the instance value that is exposed to parent components when using ref. As always, imperative code using refs should be avoided in most cases."
  },
  "useLayoutEffect": {
    "prefix": "useLayoutEffect",
    "body": [
      "useLayoutEffect(() => {",
      "  return () => {",
      "    ${1:effect}",
      "  },",
      "  [${2:input}]",
      "})"
    ],
    "description": [
      "The signature is identical to useEffect, but it fires synchronously after all DOM mutations.\n",
      "Use this to read layout from the DOM and synchronously re-render. Updates scheduled inside useLayoutEffect will be flushed synchronously, before the browser has a chance to paint."
    ]
  },
  "useDebugValue": {
    "prefix": "useDebugValue",
    "body": ["useDebugValue(${1:value})"],
    "description": "Can be used to display a label for custom hooks in React DevTools."
  }
,
  "Eslint Disable Line": {
    "prefix": "edl",
    "body": "// eslint-disable-line",
    "description": "Eslint Disable Line"
  },
  "Import Statement": {
    "prefix": "imst",
    "body": [
      "import { ${2:moduleName} } from '${1:module}'$0"
    ],
    "description": "Import Statement"
  },
  "Import": {
    "prefix": "imp",
    "body": "import ${2:moduleName} from '${1:module}'$0"
  },
  "Import No Module Name": {
    "prefix": "imn",
    "body": "import '${1:module}'$0"
  },
  "Import Everything": {
    "prefix": "ime",
    "body": "import * as ${2:alias} from '${1:module}'$0"
  },
  "Import As": {
    "prefix": "ima",
    "body": "import { ${2:originalName} as ${3:alias} } from '${1:module}'$0"
  },
  "Export Default": {
    "prefix": "ed",
    "body": "export default $1$0"
  },
  "Export Destructing": {
    "prefix": "exd",
    "body": "export { $2 } from '${1:module}'$0"
  },
  "Export As": {
    "prefix": "exa",
    "body": "export { ${2:originalName} as ${3:alias} } from '${1:module}'$0"
  },
  "Export Named Function": {
    "prefix": "enf",
    "body": [
      "export const ${1:functionName} = (${2:params}) => {",
      "  $0",
      "}",
      ""
    ],
    "description": "Export named function in ES7 syntax"
  },
  "Export Default Function": {
    "prefix": "edf",
    "body": [
      "export default (${1:params}) => {",
      "  $0",
      "}",
      ""
    ],
    "description": "Export default function in ES7 syntax"
  },
  "Method": {
    "prefix": "met",
    "body": [
      "${1:methodName} = (${2:params}) => {",
      "  ${0}",
      "}",
      ""
    ],
    "description": "Creates a method inside a class in ES7 syntax"
  },
  "For Each": {
    "prefix": "fre",
    "body": [
      "${1:array}.forEach(${2:currentItem} => {",
      "  ${0}",
      "})",
      ""
    ],
    "description": "Creates a forEach statement in ES7 syntax"
  },
  "For Of": {
    "prefix": "fof",
    "body": [
      "for(let ${1:item} of ${2:object}) {",
      "  ${0}",
      "}",
      ""
    ],
    "description": "Iterating over property names of iterable objects"
  },
  "For In": {
    "prefix": "fin",
    "body": [
      "for(let ${1:item} in ${2:object}) {",
      "  ${0}",
      "}",
      ""
    ],
    "description": "Iterating over property values of iterable objects"
  },
  "Anonymous Function": {
    "prefix": "anfn",
    "body": [
      "(${1:params}) => {",
      "  ${2}",
      "}",
      ""
    ],
    "description": "Creates an anonymous function in ES7 syntax"
  },
  "Named Function": {
    "prefix": "nfn",
    "body": [
      "const ${1:name} = (${2:params}) => {",
      "  ${3}",
      "}",
      ""
    ],
    "description": "Creates a named function in ES7 syntax"
  },
  "Destructing Object": {
    "prefix": "dob",
    "body": "const {${1:propertyName}} = ${2:objectToDestruct}",
    "description": "Creates and assigns a local variable using object destructing"
  },
  "Destructing Array": {
    "prefix": "dar",
    "body": "const [${1:propertyName}] = ${2:arrayToDestruct}",
    "description": "Creates and assigns a local variable using array destructing"
  },
  "Set Interval": {
    "prefix": "sti",
    "body": [
      "setInterval(() => {",
      "  ${2}",
      "}, ${0:intervalInms})",
      ""
    ],
    "description": "Executes the given function at specified intervals in ES7 syntax"
  },
  "Set TimeOut": {
    "prefix": "sto",
    "body": [
      "setTimeout(() => {",
      "  ${2}",
      "}, ${1:delayInms})",
      ""
    ],
    "description": "Executes the given function after the specified delay in ES7 syntax"
  },
  "Promise": {
    "prefix": "prom",
    "body": [
      "return new Promise((resolve, reject) => {",
      "  ${1}",
      "})",
      ""
    ],
    "description": "Creates and returns a new Promise in the standard ES7 syntax"
  },
  "Console Assert": {
    "prefix": "cas",
    "body": "console.assert(${1:expression}, ${2:object})",
    "description": "If the specified expression is false, the message is written to the console along with a stack trace"
  },
  "Console Clear": {
    "prefix": "ccl",
    "body": "console.clear()",
    "description": "Clears the console"
  },
  "Console Count": {
    "prefix": "cco",
    "body": "console.count(${1:label})",
    "description": "Writes the the number of times that count() has been invoked at the same line and with the same label"
  },
  "Console Dir": {
    "prefix": "cdi",
    "body": "console.dir(${1:object})",
    "description": "Prints a JavaScript representation of the specified object"
  },
  "Console Error": {
    "prefix": "cer",
    "body": "console.error(${1:object})",
    "description": "Displays a message in the console and also includes a stack trace from where the method was called"
  },
  "Console Group": {
    "prefix": "cgr",
    "body": "console.group(\"${1:label}\")",
    "description": "Groups and indents all following output by an additional level, until console.groupEnd() is called."
  },
  "Console Group End": {
    "prefix": "cge",
    "body": "console.groupEnd()",
    "description": "Closes out the corresponding console.group()."
  },
  "Console Log": {
    "prefix": "clg",
    "body": "console.log(${1:object})",
    "description": "Displays a message in the console"
  },
  "Console Trace": {
    "prefix": "ctr",
    "body": "console.trace(${1:object})",
    "description": "Prints a stack trace from the point where the method was called"
  },
  "Console Warn": {
    "prefix": "cwa",
    "body": "console.warn(${1:object})",
    "description": "Displays a message in the console but also displays a yellow warning icon along with the logged message"
  },
  "Console Info": {
    "prefix": "cin",
    "body": "console.info(${1:object})",
    "description": "Displays a message in the console but also displays a blue information icon along with the logged message"
  },
  "Comment Block": {
    "prefix": "cm",
    "body": [
      "/**",
      " * ${1}",
      " */"
    ]
  },
  "Comment Big Block": {
    "prefix": "cmmb",
    "body": [
      "/**",
      "|--------------------------------------------------",
      "| $1",
      "|--------------------------------------------------",
      "*/"
    ]
  },
  "Comment Big Line": {
    "prefix": "cbl",
    "body": "// ============================================================"
  }
,
  "HOC With Redux": {
    "prefix": "hocredux",
    "body": [
      "import React from 'react'",
      "import PropTypes from 'prop-types'",
      "import { connect } from 'react-redux'",
      "",
      "export const mapStateToProps = state => ({",
      "",
      "})",
      "",
      "export const mapDispatchToProps = {",
      " ",
      "}",
      "",
      "export const ${1:hocComponentName} = (WrappedComponent) => {",
      "  const hocComponent = ({ ...props }) => <WrappedComponent {...props} />",
      "",
      "  hocComponent.propTypes = {",
      "  }",
      "",
      "  return hocComponent",
      "}",
      "",
      "export default WrapperComponent => connect(mapStateToProps, mapDispatchToProps)(${1:hocComponentName}(WrapperComponent))",
      ""
    ]
  },
  "HOC": {
    "prefix": "hoc",
    "body": [
      "import React from 'react'",
      "import PropTypes from 'prop-types'",
      "",
      "export default (WrappedComponent) => {",
      "  const hocComponent = ({ ...props }) => <WrappedComponent {...props} />",
      "",
      "  hocComponent.propTypes = {",
      "  }",
      "",
      "  return hocComponent",
      "}",
      ""
    ]
  }
,
  "Axios API": {
    "prefix": "api",
    "body": [
      "import axios from 'axios';",
      "",
      "const api = axios.create({",
      "  baseURL: '${1}',",
      "});",
      "",
      "export default api;",
      ""
    ],
    "description": "Create Axios Configuration file"
  },
  "Root Reducer": {
    "prefix": "root-reducer",
    "body": [
      "import { combineReducers } from 'redux';",
      "",
      "const reducers = combineReducers({",
      "  example: () => [],",
      "});",
      "",
      "export default reducers;",
      ""
    ],
    "description": "Create Ducks index.js file"
  },
  "Root Saga": {
    "prefix": "root-saga",
    "body": [
      "import { all } from 'redux-saga/effects';",
      "",
      "export default function* rootSaga() {",
      "  yield all([]);",
      "}",
      ""
    ],
    "description": "Create Sagas index.js file"
  },
  "Duck": {
    "prefix": "duck",
    "body": [
      "import Immutable from 'seamless-immutable';",
      "",
      "export const Types = {${1}};",
      "",
      "const INITIAL_STATE = Immutable({${2}});",
      "",
      "export default function ${3:functionName}(state = INITIAL_STATE, action) {",
      "  switch (action.type) {",
      "    ${4}",
      "    default:",
      "      return state;",
      "  }",
      "}",
      "",
      "export const Creators = {${5}};",
      ""
    ],
    "description": "Create React Native Duck Module"
  },
  "Redux Sauce Duck": {
    "prefix": "rsduck",
    "body": [
      "import { createReducer, createActions } from 'reduxsauce';",
      "import Immutable from 'seamless-immutable';",
      "",
      "/* Types & Action Creators */",
      "",
      "const { Types, Creators } = createActions({",
      "// actionType: ['dataPassed'],",
      "});",
      "",
      "export const ${1:typeName}Types = Types;",
      "export default Creators;",
      "",
      "/* Initial State */",
      "",
      "export const INITIAL_STATE = Immutable({",
      "// data: [],",
      "});",
      "",
      "/* Reducers */",
      "",
      "// export const reducer = state =>",
      "//   state.merge({ data: [] });",
      "",
      "/* Reducers to types */",
      "",
      "export const reducer = createReducer(INITIAL_STATE, {",
      "// [Types.ACTION_TYPE]: reducer,",
      "});",
      ""
    ],
    "description": "Create ReactJS Duck Module with Reduxsauce"
  },
  "Create Store": {
    "prefix": "cs",
    "body": [
      "import { createStore, compose, applyMiddleware } from 'redux';",
      "import createSagaMiddleware from 'redux-saga';",
      "",
      "import reducers from './ducks';",
      "import sagas from './sagas';",
      "",
      "const middlewares = [];",
      "",
      "const sagaMonitor = process.env.NODE_ENV === 'development' ? console.tron.createSagaMonitor() : null;",
      "",
      "const sagaMiddleware = createSagaMiddleware({ sagaMonitor });",
      "",
      "middlewares.push(sagaMiddleware);",
      "",
      "const composer = process.env.NODE_ENV === 'development'",
      "  ? compose(",
      "    applyMiddleware(...middlewares),",
      "    console.tron.createEnhancer(),",
      "  )",
      "  : compose(applyMiddleware(...middlewares));",
      "",
      "const store = createStore(reducers, composer);",
      "",
      "sagaMiddleware.run(sagas);",
      "",
      "export default store;"
    ],
    "description": "Create Store index.js file"
  }
,
  "React Native Component": {
    "prefix": "rnc",
    "body": [
      "import React, { Component } from 'react'",
      "import { Text, View } from 'react-native'",
      "",
      "export default class ${1:componentName} extends Component {",
      "  render() {",
      "    return (",
      "      <View>",
      "        <Text> ${2:textInComponent} </Text>",
      "      </View>",
      "    )",
      "  }",
      "}"
    ]
  },
  "React Native Component Export": {
    "prefix": "rnce",
    "body": [
      "import React, { Component } from 'react'",
      "import { Text, View } from 'react-native'",
      "",
      "class ${1:componentName} extends Component {",
      "  render() {",
      "    return (",
      "      <View>",
      "        <Text> ${2:textInComponent} </Text>",
      "      </View>",
      "    )",
      "  }",
      "}",
      "",
      "export default ${1:componentName}"
    ]
  },
  "React Native Class Component Redux": {
    "prefix": "rncredux",
    "body": [
      "import React, { Component } from 'react'",
      "import { View, Text } from 'react-native'",
      "import PropTypes from 'prop-types'",
      "import { connect } from 'react-redux'",
      "",
      "class ${1:componentName} extends Component {",
      "  static propTypes = {",
      "    ${2:prop}: ${3:PropTypes}",
      "  }",
      "",
      "  render() {",
      "    return (",
      "      <View>",
      "        <Text> ${2:textInComponent} </Text>",
      "      </View>",
      "    )",
      "  }",
      "}",
      "",
      "const mapStateToProps = (state) => ({",
      "  ",
      "})",
      "",
      "const mapDispatchToProps = {",
      "  ",
      "}",
      "",
      "export default connect(mapStateToProps, mapDispatchToProps)(${1:componentName})",
      ""
    ],
    "description": "Creates a React Native component class with PropTypes with connected redux and ES7 module system"
  },
  "React Native Functional Component": {
    "prefix": "rnfc",
    "body": [
      "import React from 'react';",
      "import { View } from 'react-native';",
      "",
      "export default function ${1:componentName}() {",
      "  return (",
      "    <View>",
      "      <Text>$0</Text>",
      "     </View>",
      "  );",
      "}",
      ""
    ],
    "description": "Creates a React Native functional component"
  },
  "React Native Import": {
    "prefix": "imrn",
    "body": "import { ${1:moduleName} } from 'react-native'"
  },
  "React Native Style": {
    "prefix": "rnstyle",
    "body": "const styles = StyleSheet.create({})"
  }
,
  "Import PropTypes": {
    "prefix": "impt",
    "body": [
      "import PropTypes from 'prop-types'"
    ],
    "description": "Import PropTypes"
  },
  "Prop Type Array": {
    "prefix": "pta",
    "body": "PropTypes.array,",
    "description": "Array prop type"
  },
  "Prop Type Array Required": {
    "prefix": "ptar",
    "body": "PropTypes.array.isRequired,",
    "description": "Array prop type required"
  },
  "Prop Type Bool": {
    "prefix": "ptb",
    "body": "PropTypes.bool,",
    "description": "Bool prop type"
  },
  "Prop Type Bool Required": {
    "prefix": "ptbr",
    "body": "PropTypes.bool.isRequired,",
    "description": "Bool prop type required"
  },
  "Prop Type Func": {
    "prefix": "ptf",
    "body": "PropTypes.func,",
    "description": "Func prop type"
  },
  "Prop Type Func Required": {
    "prefix": "ptfr",
    "body": "PropTypes.func.isRequired,",
    "description": "Func prop type required"
  },
  "Prop Type Number": {
    "prefix": "ptn",
    "body": "PropTypes.number,",
    "description": "Number prop type"
  },
  "Prop Type Number Required": {
    "prefix": "ptnr",
    "body": "PropTypes.number.isRequired,",
    "description": "Number prop type required"
  },
  "Prop Type Object": {
    "prefix": "pto",
    "body": "PropTypes.object,",
    "description": "Object prop type"
  },
  "Prop Type Object Required": {
    "prefix": "ptor",
    "body": "PropTypes.object.isRequired,",
    "description": "Object prop type required"
  },
  "Prop Type String": {
    "prefix": "pts",
    "body": "PropTypes.string,",
    "description": "String prop type"
  },
  "Prop Type String Required": {
    "prefix": "ptsr",
    "body": "PropTypes.string.isRequired,",
    "description": "String prop type required"
  },
  "Prop Type Node": {
    "prefix": "ptnd",
    "body": "PropTypes.node,",
    "description": "Anything that can be rendered: numbers, strings, elements or an array"
  },
  "Prop Type Node Required": {
    "prefix": "ptndr",
    "body": "PropTypes.node.isRequired,",
    "description": "Anything that can be rendered: numbers, strings, elements or an array required"
  },
  "Prop Type Element": {
    "prefix": "ptel",
    "body": "PropTypes.element,",
    "description": "React element prop type"
  },
  "Prop Type Element Required": {
    "prefix": "ptelr",
    "body": "PropTypes.element.isRequired,",
    "description": "React element prop type required"
  },
  "Prop Type Instance Of": {
    "prefix": "pti",
    "body": "PropTypes.instanceOf($0),",
    "description": "Is an instance of a class prop type"
  },
  "Prop Type Instance Of Required": {
    "prefix": "ptir",
    "body": "PropTypes.instanceOf($0).isRequired,",
    "description": "Is an instance of a class prop type required"
  },
  "Prop Type Enum": {
    "prefix": "pte",
    "body": "PropTypes.oneOf(['$0']),",
    "description": "Prop type limited to specific values by treating it as an enum"
  },
  "Prop Type Enum Required": {
    "prefix": "pter",
    "body": "PropTypes.oneOf(['$0']).isRequired,",
    "description": "Prop type limited to specific values by treating it as an enum required"
  },
  "Prop Type One Of Type": {
    "prefix": "ptet",
    "body": [
      "PropTypes.oneOfType([",
      "  $0",
      "]),"
    ],
    "description": "An object that could be one of many types"
  },
  "Prop Type One Of Type Required": {
    "prefix": "ptetr",
    "body": [
      "PropTypes.oneOfType([",
      "  $0",
      "]).isRequired,"
    ],
    "description": "An object that could be one of many types required"
  },
  "Prop Type Array Of": {
    "prefix": "ptao",
    "body": "PropTypes.arrayOf($0),",
    "description": "An array of a certain type"
  },
  "Prop Type Array Of Required": {
    "prefix": "ptaor",
    "body": "PropTypes.arrayOf($0).isRequired,",
    "description": "AcomponentNamen array of a certain type required"
  },
  "Prop Type Object Of": {
    "prefix": "ptoo",
    "body": "PropTypes.objectOf($0),",
    "description": "An object with property values of a certain type"
  },
  "Prop Type Object Of Required": {
    "prefix": "ptoor",
    "body": "PropTypes.objectOf($0).isRequired,",
    "description": "An object with property values of a certain type required"
  },
  "Prop Type Shape": {
    "prefix": "ptsh",
    "body": [
      "PropTypes.shape({",
      "  $0",
      "}),"
    ],
    "description": "An object taking on a particular shape"
  },
  "Prop Type Shape Required": {
    "prefix": "ptshr",
    "body": [
      "PropTypes.shape({",
      "  $0",
      "}).isRequired,"
    ],
    "description": "An object taking on a particular shape required"
  },
  "Static Prop Types": {
    "prefix": "ptypes",
    "body": [
      "static propTypes = {",
      "$0",
      "}",
      ""
    ]
  }
,
  "Import Redux Statement": {
    "prefix": "redux",
    "body": ["import { connect } from 'react-redux'", ""]
  },
  "Redux Pure Function": {
    "prefix": "rpf",
    "body": [
      "export const $1 = '$1'",
      "",
      "export function $2($3) {",
      "\treturn {",
      "\t\ttype: $1,",
      "\t\t$3",
      "\t}",
      "}"
    ]
  },
  "Redux Pure Function Const": {
    "prefix": "rpc",
    "body": [
      "export const $1 = '$1'",
      "",
      "export const $2 = $3 => ({",
      "\ttype: $1,",
      "\t$3",
      "})"
    ]
  },
  "React Class Compoment Redux": {
    "prefix": "rcredux",
    "body": [
      "import React, { Component } from 'react'",
      "import PropTypes from 'prop-types'",
      "import { connect } from 'react-redux'",
      "",
      "class ${1:componentName} extends Component {",
      "  static propTypes = {",
      "    ${2:prop}: ${3:PropTypes}",
      "  }",
      "",
      "  render() {",
      "    return (",
      "      <div>",
      "        $0",
      "      </div>",
      "    )",
      "  }",
      "}",
      "",
      "const mapStateToProps = (state) => ({",
      "  ",
      "})",
      "",
      "const mapDispatchToProps = {",
      "  ",
      "}",
      "",
      "export default connect(mapStateToProps, mapDispatchToProps)(${1:componentName})",
      ""
    ],
    "description": "Creates a React component class with PropTypes with connected redux and ES7 module system"
  },
  "Mapping To Props": {
    "prefix": "reduxmap",
    "body": [
      "const mapStateToProps = (state) => ({",
      "  ${1}",
      "})",
      "",
      "const mapDispatchToProps = {",
      "  ",
      "}",
      ""
    ]
  },
  "Redux Action": {
    "prefix": "rxaction",
    "body": [
      "export const ${1:actionName} = (${2:param}) => ({",
      "  type: ${3:type},",
      "  payload: ${4:payload}",
      "})",
      ""
    ]
  },
  "Redux Const": {
    "prefix": "rxconst",
    "body": "export const ${1:constantName} = '${1:constantName}'"
  },
  "Redux Reducer": {
    "prefix": "rxreducer",
    "body": [
      "const initialState = {",
      "",
      "}",
      "",
      "export default (state = initialState, action) => {",
      "  switch (action.type) {",
      "",
      "  case ${1:typeName}:",
      "    return { ...state }",
      "",
      "  default:",
      "    return state",
      "  }",
      "}",
      ""
    ]
  },
  "Redux Selector": {
    "prefix": "rxselect",
    "body": [
      "import { createSelector } from 'reselect'",
      "",
      "export const ${1:selectorName} = state => state.${2:selector}",
      ""
    ]
  }
,
  "Reactotron Config React": {
    "prefix": "tron-r",
    "body": [
      "import Reactotron from 'reactotron-react-js';",
      "",
      "if (process.env.NODE_ENV === 'development') {",
      "  const tron = Reactotron.configure().connect();",
      "",
      "  tron.clear();",
      "",
      "  console.tron = tron;",
      "}",
      ""
    ],
    "description": "Create ReactJS Reactotron Config"
  },
  "Reactotron Redux Config for React": {
    "prefix": "tron-redux-r",
    "body": [
      "import Reactotron from 'reactotron-react-js';",
      "import { reactotronRedux } from 'reactotron-redux';",
      "import sagaPlugin from 'reactotron-redux-saga';",
      "",
      "if (__DEV__) {",
      "  const tron = Reactotron.configure()",
      "    .use(reactotronRedux())",
      "    .use(sagaPlugin())",
      "    .connect();",
      "",
      "  tron.clear();",
      "",
      "  console.tron = tron;",
      "}",
      ""
    ],
    "description": "Create ReactJS Reactotron Config with Redux and Redux Saga"
  },
  "Reactotron Config for React Native": {
    "prefix": "tron-rn",
    "body": [
      "import Reactotron from 'reactotron-react-native';",
      "",
      "if (__DEV__) {",
      "  const tron = Reactotron",
      "    .configure()",
      "    .useReactNative()",
      "    .connect();",
      "",
      "  tron.clear();",
      "",
      "  console.tron = tron;",
      "}",
      ""
    ],
    "description": "Create React Native Reactotron Config"
  },
  "Reactotron Redux Config for React Native": {
    "prefix": "tron-redux-rn",
    "body": [
      "import Reactotron from 'reactotron-react-native';",
      "import { reactotronRedux } from 'reactotron-redux';",
      "import sagaPlugin from 'reactotron-redux-saga';",
      "",
      "if (__DEV__) {",
      "  const tron = Reactotron.configure()",
      "    .useReactNative()",
      "    .use(reactotronRedux())",
      "    .use(sagaPlugin())",
      "    .connect();",
      "",
      "  tron.clear();",
      "",
      "  console.tron = tron;",
      "}",
      ""
    ],
    "description": "Create React Native Reactotron Config with Redux and Redux Saga"
  },
  "Reactotron Console Log": {
    "prefix": "ctl",
    "body": [
      "console.tron.log('$1');",
      ""
    ],
    "description": "Useful and Fast way to add a console.tron.log and continue your proccess"
  },
  "Reactotron Console Warn": {
    "prefix": "ctw",
    "body": [
      "console.tron.warn('$1');",
      ""
    ],
    "description": "Useful and Fast way to add a console.tron.warn and continue your proccess"
  },
  "Reactotron Console Error": {
    "prefix": "cte",
    "body": [
      "console.tron.error('$1');",
      ""
    ],
    "description": "Useful and Fast way to add a console.tron.error and continue your proccess"
  }
,
  "Describe Block": {
    "prefix": "desc",
    "body": ["describe('$1', () => {", "  $0", "})", ""],
    "description": "Testing `describe` block"
  },
  "Test Block": {
    "prefix": "test",
    "body": ["test('should $1', () => {", "  $0", "})", ""],
    "description": "Testing `test` block"
  },
  "It Block": {
    "prefix": "tit",
    "body": ["it('should $1', () => {", "  $0", "})", ""],
    "description": "Testing `it` block"
  },
  "Setup Test": {
    "prefix": "stest",
    "body": [
      "import { ${1:ComponentName}, mapStateToProps, mapDispatchToProps } from '../${1:ComponentName}'",
      "",
      "describe('<${1:ComponentName} />', () => {",
      "  const defaultProps = {",
      "",
      "  }",
      "",
      "  const setup = buildSetup(${1:ComponentName}, defaultProps)",
      "",
      "  test('render', () => {",
      "    expect(setup().wrapper).toMatchSnapshot()",
      "  })",
      "})",
      ""
    ]
  },
  "Setup Test With Enzyme To Json": {
    "prefix": "sjtest",
    "body": [
      "import toJson from 'enzyme-to-json'",
      "import { ${1:ComponentName}, mapStateToProps, mapDispatchToProps } from '../${1:ComponentName}'",
      "",
      "describe('<${1:ComponentName} />', () => {",
      "  const defaultProps = {",
      "",
      "  }",
      "",
      "  const setup = buildSetup(${1:ComponentName}, defaultProps)",
      "",
      "  test('render', () => {",
      "    expect(toJson(setup().wrapper)).toMatchSnapshot()",
      "  })",
      "})",
      ""
    ]
  },
  "Setup React Native Test": {
    "prefix": "sntest",
    "body": [
      "import 'react-native'",
      "import React from 'react'",
      "import renderer from 'react-test-renderer'",
      "",
      "import ${1:ComponentName} from '../${1:ComponentName}'",
      "",
      "describe('<${1:ComponentName} />', () => {",
      "  const defaultProps = {",
      "",
      "  }",
      "",
      "  const wrapper = renderer.create(<${1:ComponentName,...defaultProps} />)",
      "",
      "  test('render', () => {",
      "    expect(wrapper).toMatchSnapshot()",
      "  })",
      "})",
      ""
    ]
  },
  "Setup React Native Test With Redux": {
    "prefix": "snrtest",
    "body": [
      "import 'react-native'",
      "import React from 'react'",
      "import renderer from 'react-test-renderer'",
      "import { Provider } from 'react-redux'",
      "",
      "import store from 'src/store/configureStore'",
      "import ${1:ComponentName} from '../${1:ComponentName}'",
      "",
      "describe('<${1:ComponentName} />', () => {",
      "  const defaultProps = {",
      "",
      "  }",
      "",
      "  const wrapper = renderer.create(",
      "    <Provider store={store}>",
      "      <${1:ComponentName,...defaultProps} />",
      "    </Provider>,",
      "  )",
      "",
      "  test('render', () => {",
      "    expect(wrapper).toMatchSnapshot()",
      "  })",
      "})",
      ""
    ]
  }
,
  "Styled Components File for React": {
    "prefix": "styled-r",
    "body": [
      "import styled from 'styled-components';",
      "",
      "export const ${1:Container} = styled.${2:div}`",
      "  ${3}",
      "`;",
      ""
    ],
    "description": "Create ReactJS Styled Components file"
  },
  "Styled Component File for React Native": {
    "prefix": "styled-rn",
    "body": [
      "import styled from 'styled-components/native';",
      "",
      "export const ${1:Container} = styled.${2:View}`",
      "  ${3}",
      "`;",
      ""
    ],
    "description": "Create React Native Styled Components file"
  },
  "Styled Component": {
    "prefix": "stc",
    "body": ["export const $1 = styled.$2`", "  $3", "`", ""],
    "description": "Create Styled Component"
  }
,
  "React Router Import": {
    "prefix": "imrr",
    "body": [
      "import {",
      "\tBrowserRouter as Router,",
      "\tRoute",
      "} from 'react-router-dom'\n"
    ]
  },
  "React Router NavLink Import": {
    "prefix": "imnl",
    "body": "import { NavLink } from 'react-router-dom'\n"
  },
  "React Router With Router Import": {
    "prefix": "imwr",
    "body": "import { withRouter } from 'react-router-dom'"
  },
  "React Router Router": {
    "prefix": "router",
    "body": [
      "<Router>",
      "\t${0}",
      "</Router>"
    ]
  },
  "React Router Route": {
    "prefix": "route",
    "body": "<Route path='${1:path}' component={${2:component}}/>\n"
  },
  "React Router NavLink": {
    "prefix": "navlink",
    "body": "<NavLink to={${1:path}}>{$anchorText}</NavLink>\n"
  }
,
  "Import React": {
    "prefix": "imr",
    "body": ["import React from 'react'", ""]
  },
  "Import React, { Component }": {
    "prefix": "imrc",
    "body": ["import React, { Component } from 'react'", ""]
  },
  "Import React, { Component } & PropTypes": {
    "prefix": "imrcp",
    "body": [
      "import React, { Component } from 'react'",
      "import PropTypes from 'prop-types'",
      ""
    ]
  },
  "Import React, { PureComponent }": {
    "prefix": "imrpc",
    "body": ["import React, { PureComponent } from 'react'", ""]
  },
  "Import React, { PureComponent } & PropTypes": {
    "prefix": "imrpcp",
    "body": [
      "import React, { PureComponent } from 'react'",
      "import PropTypes from 'prop-types'",
      ""
    ]
  },
  "React Class Compoment": {
    "prefix": "rcc",
    "body": [
      "import React, { Component } from 'react'",
      "",
      "export default class ${1:componentName} extends Component {",
      "  render() {",
      "    return (",
      "      <>",
      "        $0",
      "      </>",
      "    )",
      "  }",
      "}",
      ""
    ],
    "description": "Creates a React component class with ES7 module system"
  },
  "React Class Export Component": {
    "prefix": "rce",
    "body": [
      "import React, { Component } from 'react'",
      "",
      "class ${1:componentName} extends Component {",
      "  render() {",
      "    return (",
      "      <>",
      "        $0",
      "      </>",
      "    )",
      "  }",
      "}",
      "",
      "export default ${1:componentName}",
      ""
    ],
    "description": "Creates a React component class with ES7 module system"
  },
  "React Functional Export Component": {
    "prefix": "rfe",
    "body": [
      "import React from 'react'",
      "",
      "const ${1:componentName} = () => {",
      "  return (",
      "    <>",
      "      $0",
      "    </>",
      "  )",
      "}",
      "",
      "export default ${1:componentName}",
      ""
    ],
    "description": "Creates a React Functional Component with ES7 module system"
  },
  "React Functional Export Component With PropTypes": {
    "prefix": "rfep",
    "body": [
      "import React from 'react'",
      "import PropTypes from 'prop-types'",
      "",
      "const ${1:componentName} = () => {",
      "  return (",
      "    <>",
      "      $0",
      "    </>",
      "  )",
      "}",
      "",
      "${1:componentName}.propTypes = {",
      "",
      "}",
      "",
      "export default ${1:componentName}",
      ""
    ],
    "description": "Creates a React Functional Component with ES7 module system with PropTypes"
  },
  "React Functional Component": {
    "prefix": "rfc",
    "body": [
      "import React from 'react';",
      "",
      "export default function ${1:componentName}() {",
      "  return (",
      "    <>",
      "    $0",
      "    </>",
      "  );",
      "}",
      ""
    ],
    "description": "Creates a React Functional Component with ES7 module system"
  },
  "React Functional Component With PropTypes": {
    "prefix": "rfcp",
    "body": [
      "import React from 'react'",
      "import PropTypes from 'prop-types'",
      "",
      "export default function ${1:componentName}() {",
      "  return (",
      "    <>",
      "    $0",
      "    </>",
      "  );",
      "}",
      "",
      "${1:componentName}.propTypes = {",
      "",
      "}",
      ""
    ],
    "description": "Creates a React Functional Component with ES7 module system with PropTypes"
  },
  "React Class Export Component With PropTypes": {
    "prefix": "rcep",
    "body": [
      "import React, { Component } from 'react'",
      "import PropTypes from 'prop-types'",
      "",
      "class ${1:componentName} extends Component {",
      "  static propTypes = {",
      "",
      "  }",
      "",
      "  render() {",
      "    return (",
      "      <>",
      "        $0",
      "      </>",
      "    )",
      "  }",
      "}",
      "",
      "export default ${1:componentName}",
      ""
    ],
    "description": "Creates a React component class with ES7 module system"
  },
  "React Class Pure Component": {
    "prefix": "rpc",
    "body": [
      "import React, { PureComponent } from 'react'",
      "",
      "export default class ${1:componentName} extends PureComponent {",
      "  render() {",
      "    return (",
      "      <>",
      "        $0",
      "      </>",
      "    )",
      "  }",
      "}",
      ""
    ],
    "description": "Creates a React component class with ES7 module system"
  },
  "React Class Pure Component With PropTypes": {
    "prefix": "rpcp",
    "body": [
      "import React, { PureComponent } from 'react'",
      "import PropTypes from 'prop-types'",
      "",
      "export default class ${1:componentName} extends PureComponent {",
      "  static propTypes = {",
      "",
      "  }",
      "",
      "  render() {",
      "    return (",
      "      <>",
      "        $0",
      "      </>",
      "    )",
      "  }",
      "}",
      ""
    ],
    "description": "Creates a React component class with ES7 module system"
  },
  "React Class Compoment PropTypes": {
    "prefix": "rccp",
    "body": [
      "import React, { Component } from 'react'",
      "import PropTypes from 'prop-types'",
      "",
      "export default class ${1:componentName} extends Component {",
      "  static propTypes = {",
      "    ${2:prop}: ${3:PropTypes}",
      "  }",
      "",
      "  render() {",
      "    return (",
      "      <>",
      "        $0",
      "      </>",
      "    )",
      "  }",
      "}",
      ""
    ],
    "description": "Creates a React component class with PropTypes and ES7 module system"
  },
  "Class Constructor": {
    "prefix": "rconst",
    "body": [
      "constructor(props) {",
      "  super(props)",
      "",
      "  this.state = {",
      "     $0",
      "  }",
      "}",
      ""
    ],
    "description": "Adds a default constructor for it('', () => {}) the class that contains props as arguments"
  },
  "Empty State": {
    "prefix": "est",
    "body": ["this.state = {", "  $1", "}", ""],
    "description": "Creates empty state object. To be used in a constructor."
  },
  "Get Derived State From Props": {
    "prefix": "dsfp",
    "body": [
      "static getDerivedStateFromProps(props, state) {",
      "  $0",
      "}",
      ""
    ],
    "description": "Invoked right before calling the render method, both on the initial mount and on subsequent updates. It should return an object to update the state, or null to update nothing."
  },
  "Get Snapshot Before Update": {
    "prefix": "sbu",
    "body": [
      "static getSnapshotBeforeUpdate(prevProps, prevState) {",
      "  $0",
      "}",
      ""
    ],
    "description": "Invoked right before the most recently rendered output is committed to e.g. the DOM. It enables your component to capture some information from the DOM (e.g. scroll position) before it is potentially changed."
  },
  "Component Did Catch": {
    "prefix": "cdc",
    "body": ["componentDidCatch(error, info) {", "  $0", "}", ""],
    "description": "This lifecycle is invoked after an error has been thrown by a descendant component."
  },
  "Component Did Mount": {
    "prefix": "cdm",
    "body": ["componentDidMount() {", "  $0", "}", ""],
    "description": "Invoked once, only on the client (not on the server), immediately after the initial rendering occurs."
  },
  "Component Did Mount (Arrow func)": {
    "prefix": "cdma",
    "body": ["componentDidMount = () => {", "  $0", "}", ""],
    "description": "Invoked once, only on the client (not on the server), immediately after the initial rendering occurs."
  },
  "Should Component Update": {
    "prefix": "scu",
    "body": ["shouldComponentUpdate(nextProps, nextState) {", "  $0", "}", ""],
    "description": "Invoked before rendering when new props or state are being received. "
  },
  "Should Component Update (Arrow func)": {
    "prefix": "scua",
    "body": [
      "shouldComponentUpdate = (nextProps, nextState) => {",
      "  $0",
      "}",
      ""
    ],
    "description": "Invoked before rendering when new props or state are being received. "
  },
  "Component Did Update": {
    "prefix": "cdup",
    "body": ["componentDidUpdate(prevProps, prevState) {", "  $0", "}", ""],
    "description": "Invoked immediately after the component's updates are flushed to the DOM."
  },
  "Component Did Update (Arrow func)": {
    "prefix": "cdupa",
    "body": [
      "componentDidUpdate = (prevProps, prevState) => {",
      "  $0",
      "}",
      ""
    ],
    "description": "Invoked immediately after the component's updates are flushed to the DOM."
  },
  "Component Will Unmount": {
    "prefix": "cwun",
    "body": ["componentWillUnmount() {", "  $0", "}", ""],
    "description": "Invoked immediately before a component is unmounted from the DOM."
  },
  "Component Will Unmount (Arrow func)": {
    "prefix": "cwuna",
    "body": ["componentWillUnmount = () => {", "  $0", "}", ""],
    "description": "Invoked immediately before a component is unmounted from the DOM."
  },
  "Component Will Mount - [Deprecated]": {
    "prefix": "cwm",
    "body": ["componentWillMount() {", "  $0", "}", ""],
    "description": "Invoked once, both on the client and server, immediately before the initial rendering occurs"
  },
  "Component Will Mount (Arrow func) - [Deprecated]": {
    "prefix": "cwma",
    "body": ["componentWillMount = () => {", "  $0", "}", ""],
    "description": "Invoked once, both on the client and server, immediately before the initial rendering occurs"
  },
  "Component Will Receive Props - [Deprecated]": {
    "prefix": "cwr",
    "body": ["componentWillReceiveProps(nextProps) {", "  $0", "}", ""],
    "description": "Invoked when a component is receiving new props. This method is not called for the initial render."
  },
  "Component Will Receive Props (Arrow func) - [Deprecated]": {
    "prefix": "cwra",
    "body": ["componentWillReceiveProps = (nextProps) => {", "  $0", "}", ""],
    "description": "Invoked when a component is receiving new props. This method is not called for the initial render."
  },
  "Component Will Update - [Deprecated]": {
    "prefix": "cwup",
    "body": ["componentWillUpdate(nextProps, nextState) {", "  $0", "}", ""],
    "description": "Invoked immediately before rendering when new props or state are being received."
  },
  "Component Will Update (Arrow func) - [Deprecated]": {
    "prefix": "cwupa",
    "body": [
      "componentWillUpdate = (nextProps, nextState) => {",
      "  $0",
      "}",
      ""
    ],
    "description": "Invoked immediately before rendering when new props or state are being received."
  },
  "Component Render": {
    "prefix": "ren",
    "body": [
      "render() {",
      "  return (",
      "    <>",
      "      $0",
      "    </>",
      "  )",
      "}"
    ],
    "description": "Basic render."
  },
  "Component Set State Object": {
    "prefix": "sst",
    "body": "this.setState({$0})",
    "description": "Performs a shallow merge of nextState into current state"
  },
  "Component Set State Func": {
    "prefix": "ssf",
    "body": ["this.setState((state, props) => { return { $0 }})", ""],
    "description": "Performs a shallow merge of nextState into current state"
  },
  "Component Props": {
    "prefix": "props",
    "body": "this.props.$0",
    "description": "Access component's props"
  },
  "Component State": {
    "prefix": "state",
    "body": "this.state.$0"
  }
}
